use makepad_widgets :: * ; live_design ! { import makepad_widgets :: base :: * ; import makepad_widgets :: theme_desktop_dark :: * ; import makepad_draw :: shader :: std :: * ; main_page = <ScrollYView >{ draw_bg : { fn pixel (self) -> vec4 { let center = vec2 (0.5 , 0.5) ; let distance = distance (self . pos , center) ; let factor = clamp (distance , 0.0 , 1.0) ; let color0 = vec4 (0.8117647 , 0.9607843 , 0.9882353 , 1.0) ; let stop0 = 0.0 ; let color1 = vec4 (1.0 , 1.0 , 1.0 , 1.0) ; let stop1 = 0.5 ; let color2 = vec4 (1.0 , 1.0 , 1.0 , 1.0) ; let stop2 = 1.0 ; return mix (color0 , mix (color1 , color2 , smoothstep (stop1 , stop2 , factor)) , smoothstep (stop0 , stop1 , factor)) ; } } , show_bg : true , width : All , height : 600 , title_wrap = < View >{ align : { x : 0.5 , y : 0 } , flow : Down , spacing : 24 , width : All , height : 600 , < Label >{ draw_text : { text_style : { font_size : 10 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.427 , 0.529 , 1.0) } } , margin : { top : 92 , right : 0 , bottom : 0 , left : 0 } , width : Fit , text : "GOSIM" , } < View >{ flow : Down , width : All , height : 240 , < View >{ align : { x : 0.5 , y : 0.5 } , < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.427 , 0.529 , 1.0) } } , text : "G" , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.0 , 0.0 , 1.0) } } , text : "lobal" , } < View >{ width : 26 , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.427 , 0.529 , 1.0) } } , text : "O" , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.0 , 0.0 , 1.0) } } , text : "pen-" , } } < View >{ align : { x : 0.5 , y : 0.5 } , < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.427 , 0.529 , 1.0) } } , text : "S" , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.0 , 0.0 , 1.0) } } , text : "ource" , } < View >{ width : 26 , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.427 , 0.529 , 1.0) } } , text : "I" , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.0 , 0.0 , 1.0) } } , text : "nnovation" , } } < View >{ align : { x : 0.5 , y : 0.5 } , < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.427 , 0.529 , 1.0) } } , text : "M" , } < Label >{ draw_text : { text_style : { font_size : 52 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.0 , 0.0 , 1.0) } } , text : "eetup" , } } } < Label >{ draw_text : { text_style : { font_size : 12 , } , fn get_color (self) -> vec4 { return vec4 (0.0 , 0.0 , 0.0 , 1.0) } } , width : Fit , text : "Created by the Open-Source Community, For the Open-Source Community." , } title_event_btn = < Button >{ draw_bg : { uniform border_radius : 3.0 fn pixel (self) -> vec4 { let sdf = Sdf2d :: viewport (self . pos * self . rect_size) let bg_color = mix (vec4 (0.0 , 0.427 , 0.529 , 1.0) , vec4 (0.517 , 0.912 , 0.972 , 1.0) , self . hover) sdf . box (1.0 , 1.0 , self . rect_size . x - 2.0 , self . rect_size . y - 2.0 , self . border_radius) sdf . fill_keep (bg_color) return sdf . result } } , draw_text : { text_style : { font : { path : dep ("crate://self/resources/GoNotoKurrent-Bold.ttf") } , } , fn get_color (self) -> vec4 { return mix (vec4 (1.0 , 1.0 , 1.0 , 1.0) , vec4 (0.0 , 0.0 , 0.0 , 1.0) , self . hover) } } , width : 180 , height : Fit , padding : { top : 16 , right : 16 , bottom : 16 , left : 16 } , text : "Upcoming Events" , } } } }